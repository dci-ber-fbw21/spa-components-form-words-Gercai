{"ast":null,"code":"var _jsxFileName = \"/home/dci-student/Dev/practice/jscript/react/april/spa-components-form-words-Gercai/src/components/form/index.js\";\nimport React from 'react';\nimport './index.scss';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [],\n      currentWord: \"\"\n    };\n    this.wordList = [];\n    this.count = 0;\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  } // componentDidMount() {        \n  //     this.count++;\n  //     if(this.count > this.state.words.lengt){\n  //         this.count = 0;\n  //     }\n  //     console.log(this.count);\n  //     this.timer = setInterval(\n  //         () => this.setState({\n  //             currentWord: this.state.words[this.state.count],\n  //             count: this.count\n  //         }),\n  //         1000,\n  //     );\n  // }\n\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  handleEnter(event) {\n    const {\n      name\n    } = event.target;\n    let word = document.querySelector(\".field\").value;\n    document.querySelector(\".field\").value = \"\";\n    console.log(word);\n    this.wordList.push(word);\n    console.log(this.wordList);\n    this.setState({\n      words: this.wordList\n    });\n  }\n\n  function1() {\n    this.count++;\n\n    if (this.count > this.state.words.length) {\n      this.count = 0;\n    }\n  }\n\n  function2() {\n    this.setState({\n      currentWord: this.state.words[this.state.count],\n      count: this.count\n    });\n  }\n\n  handleShow(event) {\n    setInterval(function () {\n      this.function1();\n      this.function2();\n    }, 1000);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // Do stuff\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"article\", {\n      className: \"Form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, \"Enter Word:\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"field\",\n      name: \"word\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleShow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"Show\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, \"Enter\"))), /*#__PURE__*/React.createElement(\"article\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, \"I am a \", this.state.currentWord));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/dci-student/Dev/practice/jscript/react/april/spa-components-form-words-Gercai/src/components/form/index.js"],"names":["React","Form","Component","constructor","props","state","words","currentWord","wordList","count","handleEnter","bind","handleShow","componentWillUnmount","clearInterval","timer","event","name","target","word","document","querySelector","value","console","log","push","setState","function1","length","function2","setInterval","handleSubmit","preventDefault","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.scss';\n\n\n\nclass Form extends React.Component{\n \n    constructor(props){\n\n        super(props);\n\n        this.state = {\n            words: [],\n            currentWord: \"\",\n        }\n\n        \n        this.wordList = [];\n        this.count = 0;\n\n        this.handleEnter = this.handleEnter.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n\n    }\n\n    // componentDidMount() {        \n\n    //     this.count++;\n    //     if(this.count > this.state.words.lengt){\n    //         this.count = 0;\n    //     }\n\n    //     console.log(this.count);\n\n    //     this.timer = setInterval(\n\n    //         () => this.setState({\n    //             currentWord: this.state.words[this.state.count],\n    //             count: this.count\n    //         }),\n    //         1000,\n    //     );\n    // }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n\n    handleEnter(event){\n\n        const {name} = event.target;\n\n        let word = document.querySelector(\".field\").value;\n        document.querySelector(\".field\").value = \"\";\n        console.log(word);\n        \n        \n        this.wordList.push(word);\n\n        console.log(this.wordList);\n\n        this.setState({\n            words: this.wordList\n        })\n\n   }\n\n\n   function1(){\n                this.count++;\n                if(this.count > this.state.words.length){\n                    this.count = 0;\n                }    \n   }\n\n   function2(){\n    this.setState({\n        currentWord: this.state.words[this.state.count],\n        count: this.count\n    })\n   }\n\n    handleShow(event){\n       setInterval( function(){\n        this.function1();\n        this.function2();\n       },1000);\n    }   \n\n    handleSubmit(event){\n        event.preventDefault();\n\n        // Do stuff\n    }\n\n    render(){\n\n    return (\n        <article className=\"Form\">\n            \n        <form onSubmit={this.handleSubmit} className=\"show\">\n\n        <fieldset>\n            <label>Enter Word:</label>\n            <input className=\"field\" name=\"word\"></input>\n        </fieldset>\n\n        <fieldset>\n        <button onClick={this.handleShow}>Show</button>\n        <button onClick={this.handleEnter}>Enter</button>\n        </fieldset>\n\n        </form>\n\n        <article>\n\n           I am a {this.state.currentWord} \n        </article>\n\n          \n        </article>\n      );\n\n    }\n}\n\n\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}